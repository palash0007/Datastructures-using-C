#include<stdio.h>
#include<stdlib.h>

struct circular_queue
{
    int data;
    struct circular_queue *next;
};

struct circular_queue *front =NULL, *rear=NULL;
int sz;

void Enqueue()
{
    struct circular_queue *newnode;
    newnode = (struct circular_queue*)malloc(sizeof(struct circular_queue));
    int val;
    printf("Enter the value to be added -> ");
    scanf("%d",&val);
    newnode->data = val;
    if(front == NULL)
    {
        front = newnode;
        rear = newnode;
        newnode->next = front;
    }
    else
    {
        rear->next = newnode;
        newnode->next = front;
        rear=newnode;
    }
    printf("VALUE ADDED.\n\n");
}

void Dequeue()
{
    if(front==NULL)
    {
        printf("DEQUEUE NOT POSSIBLE - UNDERFLOW.\n\n");
        return;
    }
    struct circular_queue *temp;
    printf("VALUE DEQUEUED -> %d.\n\n",front->data);
    temp = front;
    if(front == rear)
    {
        front = NULL;
        rear = NULL;
    }
    else
    {
        front=front->next;
        rear->next = front;
    }
    free(temp);
}

void Peek()
{
    if(front == NULL)
         printf("THE LINKED LIST IS EMPTY - UNDERFLOW.\n\n");
    else
        printf("THE VALUE AT FRONT IS -> %d.\n\n",front->data);
}

int IsEmpty()
{
    if(front == NULL)
        return 1;
    else
        return 0;
}

int main()
{
    int ch;
    while(1)
    {
        printf("PRESS 1 to ENQUEUE, 2 to DEQUEUE, 3 to PEEK, 4 for IsEmpty, 0 to EXIT -> ");
        scanf("%d",&ch);
        if(ch==1)
            Enqueue();
        else if(ch==2)
            Dequeue();
        else if(ch==3)
            Peek();
        else if(ch==4)
        {
            sz=IsEmpty();
            if(sz)
                printf("THE CIRCULAR QUEUE IS EMPTY - UNDERFLOW.\n\n");
            else
                printf("THE CIRCULAR QUEUE IS NOT EMPTY.\n\n");
        }
        else if(ch==0)
                break;
    }
    printf("..... THANK YOU .....");
    return 0;
}
